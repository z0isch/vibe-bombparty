// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { SettingsState as __SettingsState } from "./settings_state_type";
import { CountdownState as __CountdownState } from "./countdown_state_type";
import { PlayingState as __PlayingState } from "./playing_state_type";

// A namespace for generated variants and helper functions.
export namespace GameState {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Settings = { tag: "Settings", value: __SettingsState };
  export type Countdown = { tag: "Countdown", value: __CountdownState };
  export type Playing = { tag: "Playing", value: __PlayingState };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Settings = (value: __SettingsState): GameState => ({ tag: "Settings", value });
  export const Countdown = (value: __CountdownState): GameState => ({ tag: "Countdown", value });
  export const Playing = (value: __PlayingState): GameState => ({ tag: "Playing", value });

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Settings", __SettingsState.getTypeScriptAlgebraicType()),
      new SumTypeVariant("Countdown", __CountdownState.getTypeScriptAlgebraicType()),
      new SumTypeVariant("Playing", __PlayingState.getTypeScriptAlgebraicType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: GameState): void {
      GameState.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): GameState {
      return GameState.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `GameState`.
export type GameState = GameState.Settings | GameState.Countdown | GameState.Playing;

export default GameState;

