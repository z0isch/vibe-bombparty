// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { InvalidGuessEvent as __InvalidGuessEvent } from "./invalid_guess_event_type";
import { FreeLetterAwardEvent as __FreeLetterAwardEvent } from "./free_letter_award_event_type";

// A namespace for generated variants and helper functions.
export namespace GameStateEvent {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type InvalidGuess = { tag: "InvalidGuess", value: __InvalidGuessEvent };
  export type TimeUp = { tag: "TimeUp" };
  export type MyTurn = { tag: "MyTurn" };
  export type IWin = { tag: "IWin" };
  export type ILose = { tag: "ILose" };
  export type CorrectGuess = { tag: "CorrectGuess", value: string };
  export type LifeEarned = { tag: "LifeEarned" };
  export type FreeLetterAward = { tag: "FreeLetterAward", value: __FreeLetterAwardEvent };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const InvalidGuess = (value: __InvalidGuessEvent): GameStateEvent => ({ tag: "InvalidGuess", value });
  export const TimeUp = { tag: "TimeUp" };
  export const MyTurn = { tag: "MyTurn" };
  export const IWin = { tag: "IWin" };
  export const ILose = { tag: "ILose" };
  export const CorrectGuess = (value: string): GameStateEvent => ({ tag: "CorrectGuess", value });
  export const LifeEarned = { tag: "LifeEarned" };
  export const FreeLetterAward = (value: __FreeLetterAwardEvent): GameStateEvent => ({ tag: "FreeLetterAward", value });

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("InvalidGuess", __InvalidGuessEvent.getTypeScriptAlgebraicType()),
      new SumTypeVariant("TimeUp", AlgebraicType.createProductType([])),
      new SumTypeVariant("MyTurn", AlgebraicType.createProductType([])),
      new SumTypeVariant("IWin", AlgebraicType.createProductType([])),
      new SumTypeVariant("ILose", AlgebraicType.createProductType([])),
      new SumTypeVariant("CorrectGuess", AlgebraicType.createStringType()),
      new SumTypeVariant("LifeEarned", AlgebraicType.createProductType([])),
      new SumTypeVariant("FreeLetterAward", __FreeLetterAwardEvent.getTypeScriptAlgebraicType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: GameStateEvent): void {
      GameStateEvent.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): GameStateEvent {
      return GameStateEvent.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `GameStateEvent`.
export type GameStateEvent = GameStateEvent.InvalidGuess | GameStateEvent.TimeUp | GameStateEvent.MyTurn | GameStateEvent.IWin | GameStateEvent.ILose | GameStateEvent.CorrectGuess | GameStateEvent.LifeEarned | GameStateEvent.FreeLetterAward;

export default GameStateEvent;

