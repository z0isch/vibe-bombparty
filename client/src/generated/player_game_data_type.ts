// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
import { PastGuess as __PastGuess } from "./past_guess_type";
import { GameStateEvent as __GameStateEvent } from "./game_state_event_type";

export type PlayerGameData = {
  playerIdentity: Identity,
  currentWord: string,
  lives: number,
  usedLetters: string[],
  freeLetters: string[],
  pastGuesses: __PastGuess[],
  events: __GameStateEvent[],
};

/**
 * A namespace for generated helper functions.
 */
export namespace PlayerGameData {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("playerIdentity", AlgebraicType.createIdentityType()),
      new ProductTypeElement("currentWord", AlgebraicType.createStringType()),
      new ProductTypeElement("lives", AlgebraicType.createI32Type()),
      new ProductTypeElement("usedLetters", AlgebraicType.createArrayType(AlgebraicType.createStringType())),
      new ProductTypeElement("freeLetters", AlgebraicType.createArrayType(AlgebraicType.createStringType())),
      new ProductTypeElement("pastGuesses", AlgebraicType.createArrayType(__PastGuess.getTypeScriptAlgebraicType())),
      new ProductTypeElement("events", AlgebraicType.createArrayType(__GameStateEvent.getTypeScriptAlgebraicType())),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: PlayerGameData): void {
    PlayerGameData.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): PlayerGameData {
    return PlayerGameData.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


